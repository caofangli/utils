package com.cfl.oneself.utils.inter.interviewjvm2;

/**
 * JVM体系结构
 *  垃圾回收算法四种（最终是分代收集）
 *      引用计数，不用了，有引用+1，无引用-1，直到0为止回收
 *      复制，用于新生代，浪费空间，时间。
 *      标记清除，产生内存碎片。（这一块内存空，旁边一块有东西，乱七八糟的），用于老生代
 *      标记整理（标记清除整理），移动对象需要成本。用于老生代
 *  垃圾回收的判读依据
 *      通过一系列名为 GC Roots 的对象作为起点，开始向下搜索（链状关系图，一根绳上的蚂蚱），当对象和 GC roots 没有任何引用链相连时，则说明对象不可用，被判定为死亡，反则存活。
 *      判断对象是否可达，起点必须是 GC Roots。
 *      GC Roots的种类
 *          1.虚拟机栈中引用的对象。局部变量区域，局部变量表
 *          2.方法区中的类静态属性引用的对象。（静态对象和类），强引用，不容易被回收
 *          3.方法区中常量引用的对象。
 *          4.本地方法栈中JNI（native）引用的对象
 */
public class AJVMDemo {
}
